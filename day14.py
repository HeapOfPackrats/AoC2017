#http://adventofcode.com/2017/day/14
#see URL for full specifications
#we build a 128x128 grid of 0s and 1s
#each row of the grid is generated by knot hash (day 10's puzzle)
#each row's knot hash's input is the concat of a given string, "-", and row #
#we take the binary of the knot hash's 32 chars to get 128 chars of 0s and 1s
#0s represent "empty" squares, 1s represent "used". We count the used ones

from day10b import denseHash, seqToHexStr

def main():
    with open("input14.txt") as inputFile:
        puzzleStr = inputFile.read()
    rows = makeRows(puzzleStr)
    usedSquares = countUsedSquares(rows)
    for row in rows:
        print(row)
    print("\n{} squares are used".format(usedSquares))

def hexStrToBitStr(hexStr):
    bitStr = f'{int(hexStr, 16):0>128b}'
    return bitStr

def makeRows(puzzleStr):
    rows = list()
    for i in range(128):
        puzzleInput = puzzleStr + "-" + str(i)
        sequence = list(range(0, 256))
        lengths = list(map(lambda c: ord(c), puzzleInput)) #convert all chars to ASCII code
        lengths += [17, 31, 73, 47, 23] #append sequence specified by specs
        row = hexStrToBitStr(seqToHexStr(denseHash(sequence, lengths)))
        rows.append(row)
    return rows

def countUsedSquares(rows):
    usedSquares = 0
    for row in rows:
        for char in row:
            usedSquares += int(char)
    return usedSquares
        
if __name__ == "__main__":
    main()